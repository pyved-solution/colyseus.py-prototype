# from homemade_deserializer.full_decode import *
# import schema
from colyseus_sdk import schema


# ------------------
#  main
# ------------------

data_to_crack = [
    0x80, 0x1, 0x81, 0x1, 0xff, 0x1, 0x80, 0x0, 0x2, 0x80, 0x1, 0x3, 0xff,
    0x2, 0x81, 0x4, 0x80, 0x0, 0xff, 0x3, 0x81, 0x5, 0x80, 0x1, 0xff, 0x4,
    0x80, 0x0, 0x6, 0x80, 0x1, 0x7, 0x80, 0x2, 0x8, 0xff, 0x5, 0x80, 0x0,
    0x9, 0x80, 0x1, 0xa, 0x80, 0x2, 0xb, 0xff, 0x6, 0x80, 0xa1, 0x78, 0x81,
    0xa6, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0xff, 0x7, 0x80, 0xa1, 0x79,
    0x81, 0xa6, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0xff, 0x8, 0x80, 0xa4,
    0x74, 0x69, 0x63, 0x6b, 0x81, 0xa6, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
    0xff, 0x9, 0x80, 0xa8, 0x6d, 0x61, 0x70, 0x57, 0x69, 0x64, 0x74, 0x68,
    0x81, 0xa6, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0xff, 0xa, 0x80, 0xa9,
    0x6d, 0x61, 0x70, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x81, 0xa6, 0x6e,
    0x75, 0x6d, 0x62, 0x65, 0x72, 0xff, 0xb, 0x80, 0xa7, 0x70, 0x6c, 0x61,
    0x79, 0x65, 0x72, 0x73, 0x82, 0x0, 0x81, 0xa3, 0x6d, 0x61, 0x70
]
# An alternative form is (12 sequences), ranks 0 to 11:

# b'\x80\x01\x81\x01\xFF
# \x01\x80\x00\x02\x80\x01\x03\xFF
# \x02\x81\x04\x80\x00\xFF
# \x03\x81\x05\x80\x01\xFF
# \x04\x80\x00\x06\x80\x01\x07\x80\x02\x08\xFF
# \x05\x80\x00\t\x80\x01\n\x80\x02\x0b\xFF
# \x06\x80\xa1x\x81\xa6number\xFF
# \x07\x80\xa1y\x81\xa6number\xFF
# \x08\x80\xa4tick\x81\xa6number\xFF
# \t\x80\xa8mapWidth\x81\xa6number\xFF
# \n\x80\xa9mapHeight\x81\xa6number\xFF
# \x0b\x80\xa7players\x82\x00\x81\xa3map'

# essais peuvent etre faits via une application de deltas, au choix pioche lÃ -dedans:
exemple_deltas = [
    b'\x0f\xff\x10\x80\xcb\xf8z\xb6\x1fb\x80\x80@\x81\xcb2y\xe7\xe2\xdb\x88}@',
    b'\x0f\xff\x10\x80\xcb\xf8z\xb6\x1fb\xa0\x80@\x81\xcb2y\xe7\xe2\xdbH}@',
    b'\x0f\xff\x01\x80\x0e\xa99q1PrZeJQ\x10\xff\x10\x80\xcb\xf0\xf5l?\xc4\x80y@\x81\xcb\x99\xbcs\xf1m4\x80@',
    b'\x0f\xff\x01\x80\x0c\xa9y1ezx81qP\x0e\xff\x0e\x80\xcb\x93\xe9\x96d\x0e\xdff@\x81\xcb>\xabF\xbb\xd7\xa9y@',
    b'\x0f\xff\x01@\x00',
    b'\x0f\xff\x01\x80\r\xa9fC4M120vK\x0f\xff\x0f\x80\xcb\xc0\x8c\x89\x99v\xbao@\x81\xcbu\x18\xd7Tz\x03y@',
    b'\x0F\xFF\x03\x80\xCB\xCE\xB84\xCB\xB8h\x83@'  # rang 6 ds la liste d'exemples
]

my_sch = schema.Schema.modelize_from_data(data_to_crack)

# creation du data chunk
my_d = schema.MutableDataChunk(my_sch, {
    "x": 0, "y": 0, "tick": 0,
    "mapWidth": 0,
    "mapHeight": 0
})

print()
print(' [ USING A NEW CHUNK, for calling .apply_delta(...) ]')
print('bytesize->', len(exemple_deltas[6]))
tmp = my_d.apply_delta(
    exemple_deltas[6], debug_infos=True
)

print('en fin d\'exec:')
print(my_d.content)
print('SCHEMA:')
print(my_sch)

# interpret_seq(data_to_crack, unpacked, True)
# print('unpacked:')
# print(unpacked)
